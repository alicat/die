// Generated by CoffeeScript 1.3.3
var compilers, dirname, fs;

fs = require('fs');

dirname = require('path').dirname;

compilers = {};

compilers.js = compilers.css = function(path) {
  return fs.readFileSync(path, 'utf8');
};

require.extensions['.css'] = function(module, filename) {
  var source;
  source = JSON.stringify(compilers.css(filename));
  return module._compile("module.exports = " + source, filename);
};

compilers.coffee = function(path) {
  var coffee;
  coffee = require('coffee-script');
  return coffee.compile(fs.readFileSync(path, 'utf8'), {
    filename: path
  });
};

compilers.eco = function(path) {
  var content, eco;
  eco = require('eco');
  content = eco.precompile(fs.readFileSync(path, 'utf8'));
  return "module.exports = " + content;
};

compilers.jeco = function(path) {
  var content, eco;
  eco = require('eco');
  content = eco.precompile(fs.readFileSync(path, 'utf8'));
  return "module.exports = function(values){\n  var $  = jQuery, result = $();\n  values = $.makeArray(values);\n\n  for(var i=0; i < values.length; i++) {\n    var value = values[i];\n    var elem  = $((" + content + ")(value));\n    elem.data('item', value);\n    $.merge(result, elem);\n  }\n  return result;\n};";
};

require.extensions['.jeco'] = require.extensions['.eco'];

compilers.tmpl = function(path) {
  var content;
  content = fs.readFileSync(path, 'utf8');
  return ("var template = jQuery.template(" + (JSON.stringify(content)) + ");\n") + "module.exports = (function(data){ return jQuery.tmpl(template, data); });\n";
};

require.extensions['.tmpl'] = function(module, filename) {
  return module._compile(compilers.tmpl(filename));
};

compilers.jade = function(filename) {
  var compiled, content, jade;
  jade = require('jade');
  content = fs.readFileSync(filename, 'utf8');
  compiled = jade.compile(content, {
    client: true,
    debug: false,
    compileDebug: false
  });
  return "module.exports = " + compiled + ";";
};

compilers.styl = function(filename) {
  var bootstrap, content, nib, result, stylus;
  bootstrap = require('bootstrap-hemlock');
  nib = require('nib');
  stylus = require('stylus');
  content = fs.readFileSync(filename, 'utf8');
  result = '';
  stylus(content).include(dirname(filename)).use(bootstrap()).use(nib()).render(function(err, css) {
    if (err) {
      throw err;
    }
    return result = css;
  });
  return result;
};

module.exports = compilers;
