// Generated by CoffeeScript 1.3.3
var exists, fs, spawn;

exists = require('path').existsSync;

fs = require('fs');

spawn = require('child_process').spawn;

exports.concatRead = function(files) {
  var buf, bufs, concatBuf, file, index, length, _i, _j, _len, _len1;
  if (!Array.isArray(files)) {
    files = [files];
  }
  bufs = [];
  length = 0;
  for (_i = 0, _len = files.length; _i < _len; _i++) {
    file = files[_i];
    buf = fs.readFileSync(file);
    bufs.push(buf);
    length += buf.length;
  }
  concatBuf = new Buffer(length);
  index = 0;
  for (_j = 0, _len1 = bufs.length; _j < _len1; _j++) {
    buf = bufs[_j];
    buf.copy(concatBuf, index, 0, buf.length);
    index += buf.length;
  }
  return concatBuf.toString();
};

exports.resolve = function(extensions, entry) {
  var err, ext, filename, _i, _len;
  if (exists(entry)) {
    return entry;
  }
  for (_i = 0, _len = extensions.length; _i < _len; _i++) {
    ext = extensions[_i];
    filename = entry + ext;
    if (exists(filename)) {
      return filename;
    }
  }
  err = new Error("Unable to resolve path to " + entry);
  throw err;
};

exports.exec = function(args, opts, callback) {
  var cmd;
  if (opts == null) {
    opts = {};
  }
  if (typeof opts === 'function') {
    callback = opts;
  }
  if (!Array.isArray(args)) {
    args = args.split(/\s+/g);
  }
  cmd = args.shift();
  cmd = spawn(cmd, args, opts);
  cmd.stdout.on('data', function(data) {
    return process.stdout.write(data);
  });
  cmd.stderr.on('data', function(data) {
    return process.stderr.write(data);
  });
  return cmd.on('exit', function(code) {
    if (callback) {
      return callback(null, code);
    }
  });
};

exports.exec.serial = function(arr, callback) {
  var complete, iterate;
  if (callback == null) {
    callback = function() {};
  }
  complete = 0;
  iterate = function() {
    return exports.exec(arr[complete], function() {
      complete += 1;
      if (complete === arr.length) {
        return callback();
      } else {
        return iterate();
      }
    });
  };
  return iterate();
};

exports.getEncoding = function(buffer) {
  var charCode, contentStartBinary, contentStartUTF8, encoding, i, _i, _ref;
  contentStartBinary = buffer.toString('binary', 0, 24);
  contentStartUTF8 = buffer.toString('utf8', 0, 24);
  encoding = 'utf8';
  for (i = _i = 0, _ref = contentStartUTF8.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    charCode = contentStartUTF8.charCodeAt(i);
    if (charCode === 65533 || charCode <= 8) {
      encoding = 'binary';
      break;
    }
  }
  return encoding;
};
