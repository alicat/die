// Generated by CoffeeScript 1.3.3
var exec, exists, fs;

exists = require('path').existsSync;

fs = require('fs');

exec = require('child_process').exec;

exports.concatRead = function(files) {
  var buf, bufs, concatBuf, file, index, length, _i, _j, _len, _len1;
  if (!Array.isArray(files)) {
    files = [files];
  }
  bufs = [];
  length = 0;
  for (_i = 0, _len = files.length; _i < _len; _i++) {
    file = files[_i];
    buf = fs.readFileSync(file);
    bufs.push(buf);
    length += buf.length;
  }
  concatBuf = new Buffer(length);
  index = 0;
  for (_j = 0, _len1 = bufs.length; _j < _len1; _j++) {
    buf = bufs[_j];
    buf.copy(concatBuf, index, 0, buf.length);
    index += buf.length;
  }
  return concatBuf.toString();
};

exports.resolve = function(extensions, entry) {
  var err, ext, filename, _i, _len;
  if (exists(entry)) {
    return entry;
  }
  for (_i = 0, _len = extensions.length; _i < _len; _i++) {
    ext = extensions[_i];
    filename = entry + ext;
    if (exists(filename)) {
      return filename;
    }
  }
  err = new Error("Unable to resolve path to " + entry);
  throw err;
};

exports.exec = function(args, opts) {
  if (opts == null) {
    opts = {};
  }
  return exec(args, function(err, stdout, stderr) {
    if (!opts.silent) {
      process.stdout.write(stdout);
      return process.stderr.write(stderr);
    }
  });
};

exports.getEncoding = function(buffer) {
  var charCode, contentStartBinary, contentStartUTF8, encoding, i, _i, _ref;
  contentStartBinary = buffer.toString('binary', 0, 24);
  contentStartUTF8 = buffer.toString('utf8', 0, 24);
  encoding = 'utf8';
  for (i = _i = 0, _ref = contentStartUTF8.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    charCode = contentStartUTF8.charCodeAt(i);
    if (charCode === 65533 || charCode <= 8) {
      encoding = 'binary';
      break;
    }
  }
  return encoding;
};
