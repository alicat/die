// Generated by CoffeeScript 1.3.3
var bundle, config, dirname, exists, express, join, path;

bundle = require('./bundle');

config = require('./config');

express = require('express');

path = require('path');

exists = path.existsSync;

join = path.join;

dirname = path.dirname;

exports.createServer = function(opts) {
  var app, css, dir, js,
    _this = this;
  app = express.createServer();
  opts = config.read(opts, app.settings.env);
  app.configure(function() {
    var dir;
    app.set('port', opts.port);
    dir = join(opts.base, '/views');
    if (exists(dir)) {
      app.set('views', dir);
      app.set('view engine', 'jade');
    }
    dir = join(opts.base, opts.staticPath);
    if (exists(dir)) {
      return app.use(express["static"](dir));
    } else {
      return app.use(express["static"](opts.base));
    }
  });
  app.configure('test', function() {
    return app.set('port', opts.port + 1);
  });
  app.configure('development', function() {
    app.use(express.logger());
    return app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
  });
  app.configure('production', function() {
    return app.use(express.errorHandler());
  });
  if (opts.cssBundle) {
    dir = exists(dirname(join(opts.base, opts.cssBundle.main)));
    if (dir) {
      console.log(dir);
      css = bundle.css(opts.cssBundle, opts.base);
      app.get(opts.cssBundle.url, function(req, res) {
        res.header('Content-Type', 'text/css');
        try {
          res.send(css.bundle());
        } catch (err) {
          console.error('Error bundling CSS:');
          console.trace(err);
        }
      });
    }
  }
  if (opts.jsBundle) {
    dir = exists(dirname(join(opts.base, opts.jsBundle.main)));
    if (dir) {
      js = bundle.js(opts.jsBundle, opts.base);
      app.get(opts.jsBundle.url, function(req, res) {
        res.header('Content-Type', 'application/javascript');
        try {
          res.send(js.bundle());
        } catch (err) {
          console.error('Error bundling JavaScript:');
          console.trace(err);
        }
      });
    }
  }
  app.run = function(func) {
    app.listen(opts.port, function() {
      console.log("" + app.settings.env + " server up and running at http://localhost:" + opts.port);
      if (typeof func === 'function') {
        return func();
      }
    });
    return app;
  };
  return app;
};

exports.extend = function(app, func) {
  var verb, _fn, _i, _j, _len, _len1, _ref, _ref1, _results;
  if (typeof func !== 'function') {
    return;
  }
  _ref = ['get', 'post', 'put', 'del'];
  _fn = function(verb) {
    app["__orig_" + verb] = app[verb];
    return app[verb] = function(path, handler) {
      return app["__orig_" + verb](path, function(req, res, next) {
        var ctx;
        ctx = {
          app: app,
          body: req.body,
          next: next,
          params: req.params,
          query: req.query,
          req: req,
          res: res,
          session: req.session,
          settings: app.settings,
          json: function() {
            return res.json.apply(res, arguments);
          },
          redirect: function() {
            return res.redirect.apply(res, arguments);
          },
          render: function() {
            return res.render.apply(res, arguments);
          },
          send: function() {
            return res.send.apply(res, arguments);
          }
        };
        return handler.apply(ctx, req.params);
      });
    };
  };
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    verb = _ref[_i];
    _fn(verb);
  }
  func.call(app);
  _ref1 = ['get', 'post', 'put', 'del'];
  _results = [];
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    verb = _ref1[_j];
    delete app[verb];
    _results.push(delete app["__orig_" + verb]);
  }
  return _results;
};
