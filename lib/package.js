// Generated by CoffeeScript 1.3.3
var CssPackage, Dependency, JsPackage, Stitch, coffee, compilers, detective, fs, path, stitch, toArray,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Dependency = require('./dependency');

Stitch = require('./stitch');

coffee = require('coffee-script');

compilers = require('./compilers');

detective = require('fast-detective');

fs = require('fs');

path = require('path');

stitch = require('stitch-template');

toArray = function(value) {
  if (value == null) {
    value = [];
  }
  if (Array.isArray(value)) {
    return value;
  } else {
    return [value];
  }
};

CssPackage = (function() {

  function CssPackage(cssPath) {
    try {
      this.path = require.resolve(path.resolve(cssPath));
    } catch (e) {

    }
  }

  CssPackage.prototype.compile = function() {
    if (!this.path) {
      return;
    }
    delete require.cache[this.path];
    return require(this.path);
  };

  return CssPackage;

})();

JsPackage = (function(_super) {

  __extends(JsPackage, _super);

  function JsPackage(config) {
    if (config == null) {
      config = {};
    }
    this.identifier = config.identifier || 'require';
    this.libs = toArray(config.libs);
    this.paths = toArray(config.paths);
    this.dependencies = toArray(config.dependencies);
    if (config.main) {
      this.paths.concat([path.dirname(path.resolve(config.main))]);
    }
  }

  JsPackage.prototype.compileModules = function() {
    var id, js, jsFiles, known, module, modules, required, src, unresolved, _i, _j, _len, _len1;
    this.dependency || (this.dependency = new Dependency(this.dependencies));
    this.stitch = new Stitch(this.paths);
    jsFiles = (function() {
      var _i, _len, _ref, _results;
      _ref = this.stitch.resolve();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        js = _ref[_i];
        if (js) {
          _results.push(js);
        }
      }
      return _results;
    }).call(this);
    this.modules = this.dependency.resolve().concat(jsFiles);
    unresolved = [];
    known = (function() {
      var _i, _len, _ref, _results;
      _ref = this.modules;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i].id;
        _results.push(id);
      }
      return _results;
    }).call(this);
    for (_i = 0, _len = jsFiles.length; _i < _len; _i++) {
      js = jsFiles[_i];
      if (js.ext === '.coffee') {
        src = coffee.compile(fs.readFileSync(js.filename).toString());
      } else {
        src = fs.readFileSync(js.filename).toString();
      }
      required = detective(src);
      for (_j = 0, _len1 = required.length; _j < _len1; _j++) {
        module = required[_j];
        if (__indexOf.call(known, module) < 0) {
          unresolved.push(module);
        }
      }
    }
    if (unresolved.length > 0) {
      modules = new Dependency(unresolved);
      this.modules.push.apply(this.modules, modules.resolve());
    }
    return stitch({
      identifier: this.identifier,
      modules: ((function() {
        var _k, _len2, _ref, _results;
        _ref = this.modules;
        _results = [];
        for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
          module = _ref[_k];
          _results.push(JSON.stringify(module.id) + (": function(exports, require, module) {" + (module.compile()) + "}"));
        }
        return _results;
      }).call(this)).join(', ')
    });
  };

  return JsPackage;

})(Package);

module.exports = {
  CssPackage: CssPackage,
  createCss: function(cssPath) {
    return new CssPackage(cssPath);
  },
  JsPackage: JsPackage,
  createJs: function(config) {
    return new JsPackage(config);
  }
};
