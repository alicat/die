// Generated by CoffeeScript 1.3.3

module.exports = require('mote').compile('{{identifier}}(function(/*! Stitch !*/) {\n  if (!this.{{identifier}}) {\n    var modules = {}, cache = {}, require = function(name, root) {\n      var path = expand(root, name), indexPath = expand(path, \'./index\'), module, fn;\n      module   = cache[path] || cache[indexPath]\n      if (module) {\n        return module;\n      } else if (fn = modules[path] || modules[path = indexPath]) {\n        module = {id: path, exports: {}};\n        cache[path] = module.exports;\n        fn(module.exports, function(name) {\n          return require(name, dirname(path));\n        }, module);\n        return cache[path] = module.exports;\n      } else {\n        throw \'module \' + name + \' not found\';\n      }\n    }, expand = function(root, name) {\n      var results = [], parts, part;\n      if (/^\.\.?(\/|$)/.test(name)) {\n        parts = [root, name].join(\'/\').split(\'/\');\n      } else {\n        parts = name.split(\'/\');\n      }\n      for (var i = 0, length = parts.length; i < length; i++) {\n        part = parts[i];\n        if (part == \'..\') {\n          results.pop();\n        } else if (part != \'.\' && part != \'\') {\n          results.push(part);\n        }\n      }\n      return results.join(\'/\');\n    }, dirname = function(path) {\n      return path.split(\'/\').slice(0, -1).join(\'/\');\n    };\n    this.{{identifier}} = function(name) {\n      return require(name, \'\');\n    }\n    this.{{identifier}}.define = function(bundle) {\n      for (var key in bundle)\n        modules[key] = bundle[key];\n    };\n    this.{{identifier}}.modules = modules;\n    this.{{identifier}}.cache   = cache;\n  }\n  return this.{{identifier}}.define;\n}).call(this)({\n{{modules}}\n});');
