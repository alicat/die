// Generated by CoffeeScript 1.3.3
var Die, Hem, build, compilers, config, key, path, pkg, server, test, val,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

build = require('./build');

compilers = require('./compilers');

config = require('./config');

path = require('path');

pkg = require('./package');

server = require('./server');

test = require('./test');

Hem = require('hem');

Die = (function(_super) {

  __extends(Die, _super);

  function Die(options) {
    var key, val;
    if (options == null) {
      options = {};
    }
    for (key in options) {
      val = options[key];
      this.options[key] = val;
    }
    this.readConfig();
  }

  Die.prototype.options = config.defaults;

  Die.prototype.build = function() {
    this.readConfig('production');
    return build(this);
  };

  Die.prototype.createServer = function() {
    return server(this);
  };

  Die.prototype.jsPackage = function() {
    return pkg.createPackage({
      dependencies: this.options.dependencies,
      paths: this.options.paths.concat([path.dirname(this.options.main)]),
      libs: this.options.libs
    });
  };

  Die.prototype.readConfig = function(name) {
    return this.options = config.readConfig(this.options, name);
  };

  return Die;

})(Hem);

for (key in compilers) {
  val = compilers[key];
  Die.prototype.compilers[key] = val;
}

module.exports = Die;
