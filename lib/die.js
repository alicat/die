// Generated by CoffeeScript 1.3.3
var Die, build, compilers, config, join, pkg, server;

build = require('./build');

compilers = require('./compilers');

config = require('./config');

pkg = require('./package');

server = require('./server');

join = require('path').join;

Die = (function() {

  function Die(options) {
    var key, val;
    if (options == null) {
      options = {};
    }
    for (key in options) {
      val = options[key];
      this.options[key] = val;
    }
    this.base = options.base || process.cwd();
    this.readConfig();
  }

  Die.prototype.options = config.defaults;

  Die.prototype.build = function() {
    this.readConfig('production');
    return build(this);
  };

  Die.prototype.compilers = compilers;

  Die.prototype.createServer = function(func) {
    var app;
    app = server.createServer(this);
    server.enableDsl(app, func);
    return app;
  };

  Die.prototype.cssPackage = function() {
    return pkg.createCss(join(this.base, this.options.css));
  };

  Die.prototype.jsPackage = function() {
    var lib, mod, path;
    return pkg.createJs({
      dependencies: (function() {
        var _i, _len, _ref, _results;
        _ref = this.options.dependencies;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mod = _ref[_i];
          _results.push(join(this.base, mod));
        }
        return _results;
      }).call(this),
      paths: (function() {
        var _i, _len, _ref, _results;
        _ref = this.options.paths;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          path = _ref[_i];
          _results.push(join(this.base, path));
        }
        return _results;
      }).call(this),
      libs: (function() {
        var _i, _len, _ref, _results;
        _ref = this.options.libs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          lib = _ref[_i];
          _results.push(join(this.base, lib));
        }
        return _results;
      }).call(this)
    });
  };

  Die.prototype.readConfig = function(name) {
    var path;
    if (name == null) {
      name = 'default';
    }
    path = join(this.base, this.options.configPath, name);
    return this.options = config.readConfig(this.options, path);
  };

  Die.prototype.run = function(func) {
    var app;
    app = this.createServer(func);
    return app.run();
  };

  return Die;

})();

module.exports = Die;
