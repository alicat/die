// Generated by CoffeeScript 1.3.3
var Die, Hem, build, cli, compilers, config, create, defaults, die, key, pkg, server, test, val, wrapper,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

build = require('./build');

cli = require('./cli');

compilers = require('./compilers');

config = require('./config');

create = require('./create');

defaults = require('./defaults');

pkg = require('./package');

server = require('./server');

test = require('./test');

Hem = require('hem');

Die = (function(_super) {

  __extends(Die, _super);

  function Die(options) {
    var key, value;
    if (options == null) {
      options = {};
    }
    for (key in options) {
      value = options[key];
      this.options[key] = value;
    }
    config.readConfig.call(this);
  }

  Die.prototype.options = defaults;

  Die.prototype.exec = function() {
    return cli.exec.call(this);
  };

  Die.prototype.build = function() {
    return build.call(this);
  };

  Die.prototype.createServer = function() {
    return server.createServer.call(this);
  };

  Die.prototype.hemPackage = function() {
    return pkg.createPackage({
      dependencies: this.options.dependencies,
      paths: this.options.paths,
      libs: this.options.libs
    });
  };

  Die.prototype["new"] = function() {
    return create();
  };

  Die.prototype.readConfig = function() {
    return config.readConfig.call(this);
  };

  Die.prototype.run = function(cb) {
    var app;
    app = server.createServer.call(die, cb);
    return app.run();
  };

  Die.prototype.test = function(args) {
    return test(args);
  };

  return Die;

})(Hem);

for (key in compilers) {
  val = compilers[key];
  Die.prototype.compilers[key] = val;
}

die = new Die;

wrapper = function(cb) {
  return die.run(cb);
};

for (key in die) {
  val = die[key];
  wrapper[key] = val;
}

module.exports = wrapper;
