// Generated by CoffeeScript 1.3.3
var encoding, exec, fs, mote, path, utils, version, wrench;

fs = require('fs');

mote = require('mote');

path = require('path');

version = require('../package.json').version;

wrench = require('wrench');

utils = require('./utils');

encoding = utils.getEncoding;

exec = utils.exec;

module.exports = function(name, _arg, ctx) {
  var buffer, config, dest, file, filePath, install, key, src, template, val, _i, _len, _ref, _ref1;
  config = _arg.config, template = _arg.template, install = _arg.install;
  if (ctx == null) {
    ctx = {};
  }
  template = template || 'default';
  src = path.join(__dirname, '../templates', template);
  dest = name;
  ctx.name = path.basename(dest);
  ctx.user = process.env.USER;
  ctx.dieVersion = version;
  if (config) {
    _ref = require(config);
    for (key in _ref) {
      val = _ref[key];
      ctx[key] = val;
    }
  }
  if (path.existsSync(dest)) {
    return console.log("" + dest + " already exists.");
  }
  wrench.copyDirSyncRecursive(src, dest);
  _ref1 = wrench.readdirSyncRecursive(dest);
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    file = _ref1[_i];
    if (/^vendor/.test(file)) {
      continue;
    }
    filePath = path.join(dest, file);
    if (fs.statSync(filePath).isFile()) {
      buffer = fs.readFileSync(filePath);
      if (encoding(buffer) === 'utf8') {
        template = mote.compile(buffer.toString());
        fs.writeFileSync(filePath, template(ctx));
      }
    }
  }
  if (install) {
    return exec('npm install');
  }
};
