// Generated by CoffeeScript 1.3.3
var basename, colors, encoding, exec, exists, fs, join, mote, path, utils, version, wrench;

fs = require('fs');

mote = require('mote');

version = require('../package.json').version;

wrench = require('wrench');

colors = require('colors');

path = require('path');

exists = path.existsSync;

basename = path.basename;

join = path.join;

utils = require('./utils');

encoding = utils.getEncoding;

exec = utils.exec;

module.exports = function(name, _arg) {
  var buffer, cmd, config, ctx, dest, file, install, key, production, src, template, val, _i, _len, _ref, _ref1;
  config = _arg.config, template = _arg.template, install = _arg.install, production = _arg.production;
  template = template || 'default';
  src = join(__dirname, '../templates', template);
  dest = name;
  ctx = {
    name: basename(dest),
    user: process.env.USER,
    dieVersion: version
  };
  if (config) {
    _ref = require(config);
    for (key in _ref) {
      val = _ref[key];
      ctx[key] = val;
    }
  }
  if (exists(dest)) {
    return console.log("" + dest + " already exists.");
  }
  wrench.copyDirSyncRecursive(src, dest);
  _ref1 = wrench.readdirSyncRecursive(dest);
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    file = _ref1[_i];
    if (/^vendor/.test(file)) {
      continue;
    }
    file = join(dest, file);
    if (fs.statSync(file).isFile()) {
      buffer = fs.readFileSync(file);
      if (encoding(buffer) === 'utf8') {
        template = mote.compile(buffer.toString());
        fs.writeFileSync(file, template(ctx));
      }
    }
  }
  if (install) {
    cmd = "npm install";
    if (production) {
      cmd += " --production";
    }
    exec(cmd, {
      cwd: join(process.cwd(), ctx.name)
    });
  }
  return console.log('Iacta alea est...'.bold.red, ctx.name, 'is created.');
};
